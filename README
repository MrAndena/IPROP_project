PACS project A.Y 2023/2024, Politecnico di Milano

Supervisors: Carlo De Falco - Giuseppe Caliò
Students: Tommaso Andena - Giacomo Bottacini



######################### Directory Scheme:

- src/

    - main.cpp               
    - config_reader.cpp
    - data4geo.cpp
    - gmsh_runner.cpp
    - NACA_points_generator.cpp

- include/

    - BlockSchurPreconditioner.hpp             // NS simulation code
    - BlockSchurPreconditioner_impl.hpp        // NS simulation code  
    - InsIMEX.hpp                              // NS simulation code
    - InsIMEX_impl.hpp                         // NS simulation code
    - Time.hpp                                 // NS simulation code
    - BoundaryValues.hpp                       // NS simulation code
    - CollectorGeometryNS                      // NS and DD simulation code (magari cambia nome)
    - data_struct.hpp                          // custom struct that store the user data
    - Electrical_Values.hpp                    // DD simulation code
    - Electrical_Values_impl.hpp               // DD simulation code
    - PoissonProblem.h                         // DD simulation code
    - PoissonProblem_impl.h                    // DD simulation code
    - config_reader.hpp                        // translate .json user inputs into a struct  
    - data4geo.hpp                             // create .txt file used in the .msh creation 
    - gmsh_runner.hpp                          // run gmsh commands
    - GmshPoint.hpp                            // useful class for gmsh points writing 
    - NACA_points_generator.hpp                // writes in a .txt file the coordinates of naca points
    - json.hpp                                 // just him the one the only  

- config/

    - configuration.json                       // user interface, file used to specify all the parameters
    - GeoMeshFile.geo                          // .geo used to create the naca meshes
    - PNjunction.geo                           // .geo used to create thepn junction meshes

- output/

    - results/                                 // where the simulations results are stored              
    - meshes/                                  // where the meshes are stored (you can look at them exploiting gmsh)

- CMakeLists.txt
- README            

######################### How to run the code:

enter in the directory of the project, from you terminal type:
(NB: you need deal.ii and gmsh)

mkdir build
cd build
cmake ..
make
mpiexec -n num_proc ./executable_name

NB:
In the CMakeLists.txt file is specified the executable of gmsh, the code look in the usual directory for this executable location (/usr/bin , /usr/local/bin ecc). If the executable is saved in a non-standard direcotry please compile:

cmake -DGMSH_EXECUTABLE=/my/personal/path/to/gmsh ..

in the cmake step (third). Per deal.ii come funziona?

######################### Commands:

to delete ALL the meshes, the results of ALL the simulation and the build directory use the command:

make custom_clean

######################### JSON file description 

the user has only to change configuration.json in order to module its own personal simulation. In order to understand all the entries,
we recall that you CANNOT comment a .json file, look at data_struct. All the entries are pretty verbose, moreover you can choose the simulation to perform from the ID_simulation item.




ROBA DA FARE E DA TENERE A MENTE:

non tutti i dati passati nel json sono usati nel codice (vedi le tolleranze di NS che non le ho torvate al primo giro), quindi bisogna modulare questa cosa. Poi, i dati che sono nel .json sicuramente non sono esaustivi e non danno una modularita a 360 gradi, andranno aggiunte altre voci, in particolare vedo dura parametrizzare al 100% la costruzione della mesh

ponderare la scelta di screare un'altra struct per le BCS dentro a data_struct (per adesso non sono state toccate, sono quelle classiche)

se l'utente mette dei dati pazzi non c'è qualcosa che lo fermi, soprattutto per quanto riguarda la mesh (Exception handling)

problema nomi cartelle se faccio più e più simmulazioni, l'utente vorrebbe farlo?? c'è un modo per contare ol numero di run una volta compilato il codice ? --> fare un file.txt contatore che tiene in mente quante run sono state effettuate ?
in teoria l'utente non vorrebbe fare solo le simulazioni 1 2 3 del naca?

sistemare collectorGeometryNS per le simulazioni. penso che i risultati sballati siano legati al fatto che cambiamo la geometria e lui non se ne accorge



Ad oggi il codice fa più simulazioni in base al raggio dell'emettitore, si può cambiare questa feature in modo "rigido"


